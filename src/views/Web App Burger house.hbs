<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/stylesheets/main_style.css">
    <title>–ë—É—ÄG–µ—Ä house</title>
</head>
<body>
    <div class="main">
        <div class="upline">
            <div></div>
            <div>
                <button id="menu_button">‚ò∞ Menu</button>
            </div>
        </div>
        
        <!-- –í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é -->
        <div class="dropdown-menu" id="dropdownMenu">
            {{#if isAuthenticated}}
                <div class="user-greeting">
                    –ü—Ä–∏–≤–µ—Ç, {{user.name}}!
                </div>
                <a href="/profile">–ü—Ä–æ—Ñ–∏–ª—å</a>
                <a href="/cart">–ö–æ—Ä–∑–∏–Ω–∞ <span id="cart-counter" class="cart-counter">{{cartCount}}</span></a>
                <a href="/orders">–ú–æ–∏ –∑–∞–∫–∞–∑—ã</a>
                <a href="/auth/logout">–í—ã–π—Ç–∏</a>
            {{else}}
                <a href="/auth/register">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</a>
                <a href="/auth/login">–í–æ–π—Ç–∏</a>
            {{/if}}
        </div>

        <div class="maintext">
            <h1 style="color: var(--yellow);">–ë—É—ÄG–µ—Ä house. –í—Å–µ –¥–æ—Ä–æ–≥–∏ –≤–µ–¥—É—Ç –∫ –Ω–∞–º</h1>
        </div>

        <div class="switchmenu">
            {{#if dishes.length}}
                {{#each dishes}}
                    <div class="burgers">
                        <h2>{{this.name}}</h2>
                        <p>{{this.description}}</p>
                        <div class="dish-info">
                            <span>üçî {{this.calories}} –∫–∫–∞–ª</span>
                            <span class="dish-price">{{this.price}} ‚ÇΩ</span>
                        </div>
                        {{#if ../isAuthenticated}}
                            {{#if (lookup ../cartItems this.id)}}
                                <div class="quantity-control">
                                    <button class="quantity-btn minus" data-id="{{this.id}}">-</button>
                                    <span class="quantity-value">{{lookup ../cartItems this.id}}</span>
                                    <button class="quantity-btn plus" data-id="{{this.id}}">+</button>
                                </div>
                            {{else}}
                                <button class="add_button" 
                                        data-id="{{this.id}}" 
                                        data-name="{{this.name}}">
                                    –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
                                </button>
                            {{/if}}
                        {{else}}
                            <p class="auth-required">–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É</p>
                        {{/if}}
                    </div>
                {{/each}}
            {{else}}
                <p class="no-dishes">–ë–ª—é–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</p>
            {{/if}}
        </div>

        <div class="stillmenu">
            <img src="/images/chickens.jpg" alt="–ö—É—Ä–∏–Ω—ã–µ –±—É—Ä–≥–µ—Ä—ã">
            <img src="/images/goviadines.jpg" alt="–ì–æ–≤—è–∂—å–∏ –±—É—Ä–≥–µ—Ä—ã">
            <img src="/images/pigs.jpg" alt="–°–≤–∏–Ω—ã–µ –±—É—Ä–≥–µ—Ä—ã">
            <img src="/images/shaurmas.jpg" alt="–®–∞—É—Ä–º–∞">
            <img src="/images/hlebs.jpg" alt="–°—ç–Ω–¥–≤–∏—á–∏">
            <img src="/images/fris.jpg" alt="–§—Ä–∏">
        </div>
    </div>

    <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏ -->
    <div id="modal" class="modal">
        <span class="close">&times;</span>
        <img id="modalImage" class="modal-content">
        <a class="prev">&#10094;</a>
        <a class="next">&#10095;</a>
    </div>

    <!-- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É -->
    <div id="notification" class="notification">
        <span id="notification-message"></span>
        <span class="notification-close">√ó</span>
    </div>

    <script>
        // ===== –ì–∞–ª–µ—Ä–µ—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π =====
        const images = document.querySelectorAll('.stillmenu img');
        const modal = document.getElementById('modal');
        const modalImage = document.getElementById('modalImage');
        let currentIndex = 0;

        images.forEach((img, index) => {
            img.addEventListener('click', () => {
                modal.style.display = 'flex';
                modalImage.src = img.src;
                currentIndex = index;
            });
        });

        document.querySelector('.close').addEventListener('click', () => {
            modal.style.display = 'none';
        });

        document.querySelector('.next').addEventListener('click', () => {
            currentIndex = (currentIndex + 1) % images.length;
            modalImage.src = images[currentIndex].src;
        });

        document.querySelector('.prev').addEventListener('click', () => {
            currentIndex = (currentIndex - 1 + images.length) % images.length;
            modalImage.src = images[currentIndex].src;
        });

        modal.addEventListener('click', (e) => {
            if (e.target === modal) modal.style.display = 'none';
        });

        // ===== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é =====
        document.getElementById('menu_button').addEventListener('click', function() {
            document.getElementById('dropdownMenu').classList.toggle('show');
        });

        window.addEventListener('click', function(event) {
            if (!event.target.matches('#menu_button') && 
                !event.target.closest('.dropdown-menu')) {
                document.getElementById('dropdownMenu').classList.remove('show');
            }
        });

        // ===== –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è =====
        function showNotification(message) {
            const notification = document.getElementById('notification');
            const messageElement = document.getElementById('notification-message');
            
            messageElement.textContent = message;
            notification.classList.add('show');
            
            setTimeout(() => notification.classList.remove('show'), 3000);
        }

        document.querySelector('.notification-close').addEventListener('click', () => {
            document.getElementById('notification').classList.remove('show');
        });

        // ===== –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã =====
        async function updateCartCounter() {
            try {
                const response = await fetch('/cart/count');
                if (response.ok) {
                    const data = await response.json();
                    document.getElementById('cart-counter').textContent = data.count;
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞:', error);
            }
        }

        // ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É =====
        async function addToCartHandler(button) {
    const dishId = button.getAttribute('data-id');
    const dishName = button.getAttribute('data-name');
    
    button.classList.add('added');
    setTimeout(() => button.classList.remove('added'), 600);
    
    try {
        const response = await fetch('/cart/add', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ 
                dishId: dishId,
                quantity: 1
            })
        });

        if (response.ok) {
            const result = await response.json();
            showNotification(`"${dishName}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ –º–µ–Ω—é
            const counter = document.getElementById('cart-counter');
            if (counter) {
                counter.textContent = result.cartCount;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ —Å—á–µ—Ç—á–∏–∫
            const container = button.parentElement;
            container.innerHTML = `
                <div class="quantity-control">
                    <button class="quantity-btn minus" data-id="${dishId}">-</button>
                    <span class="quantity-value">1</span>
                    <button class="quantity-btn plus" data-id="${dishId}">+</button>
                </div>
            `;
            
            setupQuantityControls(container);
        } else {
            const error = await response.json();
            showNotification(error.message || '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è');
        }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            showNotification('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
        }
    }
        // ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ =====
       async function updateQuantityHandler(btn) {
    const dishId = btn.getAttribute('data-id');
    const isPlus = btn.classList.contains('plus');
    const quantityElement = btn.parentElement.querySelector('.quantity-value');
    
    try {
        const response = await fetch('/cart/update', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                dishId: dishId,
                action: isPlus ? 'increase' : 'decrease'
            })
        });
        
        if (response.ok) {
            const result = await response.json();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            quantityElement.textContent = result.newQuantity;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ –º–µ–Ω—é
            const counter = document.getElementById('cart-counter');
            if (counter) {
                counter.textContent = result.cartCount;
            }
            
            // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–ª–æ 0, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å"
            if (result.newQuantity < 1) {
                const dishName = btn.closest('.burgers').querySelector('h2').textContent;
                const container = btn.parentElement;
                container.innerHTML = `
                    <button class="add_button" 
                            data-id="${dishId}" 
                            data-name="${dishName}">
                        –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
                    </button>
                `;
                container.querySelector('.add_button').addEventListener('click', function() {
                    addToCartHandler(this);
                });
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞');
    }
}
        // ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º =====
        function setupQuantityControls(container) {
            container.querySelectorAll('.quantity-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    updateQuantityHandler(this);
                });
            });
        }

        // ===== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ =====
        document.querySelectorAll('.add_button').forEach(button => {
            button.addEventListener('click', function() {
                addToCartHandler(this);
            });
        });

        document.querySelectorAll('.quantity-control').forEach(control => {
            setupQuantityControls(control);
        });
    </script>
</body>
</html>