<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/stylesheets/main_style.css">
    <title>БурGер house</title>
</head>
<body>
    <div class="main">
        <div class="upline">
            <div></div>
            <div>
                <button id="menu_button">☰ Menu</button>
            </div>
        </div>
        
        <div class="dropdown-menu" id="dropdownMenu">
            {{#if isAuthenticated}}
                <div class="user-greeting">Привет, {{user.name}}!</div>
                <a href="/profile">Профиль</a>
                <a href="/cart">Корзина <span id="cart-counter">{{cartCount}}</span></a>
                <a href="/orders">Мои заказы</a>
                <a href="/auth/logout">Выйти</a>
            {{else}}
                <a href="/auth/register">Регистрация</a>
                <a href="/auth/login">Войти</a>
            {{/if}}
        </div>

        <div class="maintext">
            <h1>БурGер house. Все дороги ведут к нам</h1>
        </div>

        <div class="switchmenu">
            {{#each menuData}}
                <div class="category-section">
                    <h2 class="category-title">{{this.[0]}}</h2>
                    <div class="category-items">
                        {{#each this.[1]}}
                            <div class="dish-card">
                                <div class="dish-info">
                                    <h3>{{this.name}}</h3>
                                    <p class="description">{{this.description}}</p>
                                    <div class="details">
                                        <span class="calories">{{this.calories}} ккал</span>
                                        <span class="price">{{this.price}} ₽</span>
                                    </div>
                                   {{#if ../isAuthenticated}}
                                    {{#if (lookup ../cartItems this.id)}}
                                            <div class="quantity-control">
                                                <button class="quantity-btn minus" data-id="{{this.id}}">-</button>
                                                <span class="quantity-value">{{lookup ../cartItems this.id}}</span>
                                                <button class="quantity-btn plus" data-id="{{this.id}}">+</button>
                                            </div>
                                        {{else}}
                                            <button class="add-to-cart" data-id="{{this.id}}">Добавить в корзину</button>
                                        {{/if}}
                                    {{else}}
                                        <p class="auth-required">Авторизуйтесь, чтобы добавить в корзину</p>
                                    {{/if}}
                                </div>
                            </div>
                        {{/each}}
                    </div>
                </div>
            {{/each}}
        </div>

        <div class="stillmenu">
            <img src="/images/chickens.jpg" alt="Куриные бургеры">
            <img src="/images/goviadines.jpg" alt="Говяжьи бургеры">
            <img src="/images/pigs.jpg" alt="Свиные бургеры">
            <img src="/images/shaurmas.jpg" alt="Шаурма">
            <img src="/images/hlebs.jpg" alt="Сэндвичи">
            <img src="/images/fris.jpg" alt="Фри">
        </div>
    </div>

    <div id="modal" class="modal">
        <span class="close">&times;</span>
        <img id="modalImage" class="modal-content">
        <a class="prev">&#10094;</a>
        <a class="next">&#10095;</a>
    </div>

    <div id="notification" class="notification">
        <span id="notification-message"></span>
        <span class="notification-close">×</span>
    </div>


<script>
    // ===== Галерея изображений =====
    const images = document.querySelectorAll('.stillmenu img');
    const modal = document.getElementById('modal');
    const modalImage = document.getElementById('modalImage');
    let currentIndex = 0;

    images.forEach((img, index) => {
        img.addEventListener('click', () => {
            modal.style.display = 'flex';
            modalImage.src = img.src;
            currentIndex = index;
        });
    });

    document.querySelector('.close').addEventListener('click', () => {
        modal.style.display = 'none';
    });

    document.querySelector('.next').addEventListener('click', () => {
        currentIndex = (currentIndex + 1) % images.length;
        modalImage.src = images[currentIndex].src;
    });

    document.querySelector('.prev').addEventListener('click', () => {
        currentIndex = (currentIndex - 1 + images.length) % images.length;
        modalImage.src = images[currentIndex].src;
    });

    modal.addEventListener('click', (e) => {
        if (e.target === modal) modal.style.display = 'none';
    });

    // ===== Управление меню =====
    document.getElementById('menu_button').addEventListener('click', function() {
        document.getElementById('dropdownMenu').classList.toggle('show');
    });

    window.addEventListener('click', function(event) {
        if (!event.target.matches('#menu_button') && 
            !event.target.closest('.dropdown-menu')) {
            document.getElementById('dropdownMenu').classList.remove('show');
        }
    });

    // ===== Уведомления =====
    function showNotification(message) {
        const notification = document.getElementById('notification');
        const messageElement = document.getElementById('notification-message');
        
        messageElement.textContent = message;
        notification.classList.add('show');
        
        setTimeout(() => notification.classList.remove('show'), 3000);
    }

    document.querySelector('.notification-close').addEventListener('click', () => {
        document.getElementById('notification').classList.remove('show');
    });

    // ===== Функция для обновления счетчика корзины =====
    async function updateCartCounter() {
        try {
            const response = await fetch('/cart/count');
            if (response.ok) {
                const data = await response.json();
                document.getElementById('cart-counter').textContent = data.count;
            }
        } catch (error) {
            console.error('Ошибка обновления счетчика:', error);
        }
    }

    // ===== Обработчик добавления в корзину =====
    async function addToCartHandler(button) {
        const dishId = button.getAttribute('data-id');
        const dishName = button.getAttribute('data-name');
        const burgersBlock = button.closest('.burgers');
        
        button.classList.add('added');
        setTimeout(() => button.classList.remove('added'), 600);
        
        try {
            const response = await fetch('/cart/add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ 
                    dishId: dishId,
                    quantity: 1
                }),
                credentials: 'include'
            });

            if (response.ok) {
                const result = await response.json();
                showNotification(`"${dishName}" добавлен в корзину!`);
                
                // Обновляем счетчик в меню
                const counter = document.getElementById('cart-counter');
                if (counter) {
                    counter.textContent = result.cartCount;
                }
                
                // Создаем новый блок управления количеством
                const quantityControl = document.createElement('div');
                quantityControl.className = 'quantity-control';
                quantityControl.innerHTML = `
                    <button class="quantity-btn minus" data-id="${dishId}">-</button>
                    <span class="quantity-value">1</span>
                    <button class="quantity-btn plus" data-id="${dishId}">+</button>
                `;
                
                // Заменяем кнопку на блок управления
                button.replaceWith(quantityControl);
                
                // Настраиваем обработчики для новых кнопок
                setupQuantityControls(quantityControl);
            } else {
                const error = await response.json();
                showNotification(error.message || 'Ошибка добавления');
            }
        } catch (error) {
            console.error('Ошибка:', error);
            showNotification('Ошибка соединения');
        }
    }

    // ===== Обработчик изменения количества =====
    async function updateQuantityHandler(btn) {
        const dishId = btn.getAttribute('data-id');
        const isPlus = btn.classList.contains('plus');
        const quantityElement = btn.parentElement.querySelector('.quantity-value');
        const burgersBlock = btn.closest('.burgers');
        const dishName = burgersBlock.querySelector('h2').textContent;
        
        try {
            const response = await fetch('/cart/update', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    dishId: dishId,
                    action: isPlus ? 'increase' : 'decrease'
                }),
                credentials: 'include'
            });
            
            if (response.ok) {
                const result = await response.json();
                
                // Обновляем количество
                quantityElement.textContent = result.newQuantity;
                
                // Обновляем счетчик в меню
                const counter = document.getElementById('cart-counter');
                if (counter) {
                    counter.textContent = result.cartCount;
                }
                
                // Если количество стало 0, возвращаем кнопку "Добавить"
                if (result.newQuantity < 1) {
                    const quantityControl = btn.closest('.quantity-control');
                    const addButton = document.createElement('button');
                    addButton.className = 'add_button';
                    addButton.setAttribute('data-id', dishId);
                    addButton.setAttribute('data-name', dishName);
                    addButton.textContent = 'Добавить в корзину';
                    addButton.addEventListener('click', function() {
                        addToCartHandler(this);
                    });
                    
                    quantityControl.replaceWith(addButton);
                }
            }
        } catch (error) {
            console.error('Ошибка:', error);
            showNotification('Ошибка обновления количества');
        }
    }

    // ===== Настройка обработчиков для управления количеством =====
    function setupQuantityControls(container) {
        container.querySelectorAll('.quantity-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                updateQuantityHandler(this);
            });
        });
    }

    // ===== Инициализация обработчиков =====
    document.querySelectorAll('.add_button').forEach(button => {
        button.addEventListener('click', function() {
            addToCartHandler(this);
        });
    });

    document.querySelectorAll('.quantity-control').forEach(control => {
        setupQuantityControls(control);
    });

    // Инициализация счетчика корзины при загрузке
    document.addEventListener('DOMContentLoaded', function() {
        updateCartCounter();
    });
</script>
</body>
</html>